#summary Why would you ever want to use a CacheMap?

= The Case for CacheMap (a Thread-Safe Lazy Map) =

The purpose of a thread-safe lazy map is to cache expensive look-ups and calculations, where the cost of looking up a keyed value is so severe that it's worth spending some memory to cache commonly used values.  The most obvious example is in database look-ups, but DNS look-ups and potentially expensive data validations are other good cases.

= Database Entity Look-Ups =

Many applications spend a lot of time doing look-ups of ORM data entities by key.  This is trivially done with the lazy map.
{{{
    private static final CacheMap<Integer, ToyEntity> entityCache = new CacheMap<Integer, ToyEntity>(new Transformer() {
        public Object transform(final Object primaryKey) {
            return getEntityManager().find(ToyEntity.class, primaryKey);
        }
    }, new SyncLogEqLock<Integer>());

    public static ToyEntity getEntity(final int primaryKey) {
        return entityCache.get(primaryKey);
    }
}}}
For a more thorough example, check out [http://code.google.com/p/jconch/source/browse/trunk/eg/eg/jconch/cachemap/BusinessClassThatNeedsADatabaseLookup.java BusinessClassThatNeedsADatabaseLookup] in the source repository.